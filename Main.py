import datetime
import pytz
import telebot
from telebot import types

from UsersDataBase import (add_user, get_current_user, update_user_data, add_favorite_trip, get_favorite_trips,
                           remove_favorite_trip)
from ScheduleGiver import get_closest_trains
from ScheduleParser import update_main_page, update_all_links, update_schedule_pages, update_schedule_json

token_main_bot, token_feedback_bot = get_favorite_trips(1)
main_bot = telebot.TeleBot(token_main_bot)
feedback_bot = telebot.TeleBot(token_feedback_bot)

MY_CHAT_ID = 740063203

station_button_names = {"Kosmonavtov_Avenue": "üë®‚ÄçüöÄ –ü—Ä–æ—Å–ø–µ–∫—Ç –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤",
                        "Uralmash": "üè≠ –£—Ä–∞–ª–º–∞—à",
                        "Mashinostroiteley": "üöò –ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π",
                        "Uralskaya": "üèî –£—Ä–∞–ª—å—Å–∫–∞—è",
                        "Dinamo": "üèü –î–∏–Ω–∞–º–æ",
                        "Square_of_1905": "üéä –ü–ª–æ—â–∞–¥—å 1905 –≥–æ–¥–∞",
                        "Geologicheskaya": "üé™ –ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è",
                        "Chkalovskaya": "üß≥ –ß–∫–∞–ª–æ–≤—Å–∫–∞—è",
                        "Botanicheskaya": "üå∑ –ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è"}


@main_bot.message_handler(commands=['start'])
def start_func(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    main_menu_button = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìù")
    settings_button = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
    feedback_button = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚ò∫Ô∏è")

    markup.add(main_menu_button)
    markup.row(feedback_button, settings_button)

    user_data = message.from_user
    add_user(message.chat.id, user_data.username, user_data.first_name, user_data.last_name, datetime.date.today())

    hello_message = (f"–ü—Ä–∏–≤–µ—Ç, {user_data.first_name}! üëã\n"
                     "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–µ–∑–¥–æ–≤ –≤ –º–µ—Ç—Ä–æ–ø–æ–ª–∏—Ç–µ–Ω–µ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞!\n"
                     "–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n"
                     "1. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É–µ—Ö–∞—Ç—å\n"
                     "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å\n"
                     "3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 3 –±–ª–∏–∂–∞–π—à–∏—Ö (—Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏) –ø–æ–µ–∑–¥–æ–≤\n"
                     "\n"
                     "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è, –≤—ã–±—Ä–∞–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–µ–∑–¥–æ–≤, –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç "
                     "—Å–æ–æ–±—â–∞—Ç—å –±–æ—Ç! –î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å "
                     '—É–¥–æ–±–Ω—ã–º –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"\n\n'
                     '–ò —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ '
                     '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã"\n'
                     "\n\n"
                     "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
                     "/menu - –í—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞ üìù\n"
                     "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ üõ†\n"
                     "/feedback - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚ò∫Ô∏è\n"
                     "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! ‚ù§Ô∏è\n"
                     "–ñ–º–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –≤—ã—à–µ –∏–ª–∏ –≤ –º–µ–Ω—é\n"
                     "üëáüëáüëá")

    main_bot.send_message(message.chat.id, hello_message, reply_markup=markup, parse_mode="html")


@main_bot.message_handler(func=lambda message:
                          message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìù" or message.text.lower() == "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                          or message.text == "/menu")
def main_menu(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /menu –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    send_first_station_menu(message)
    main_bot.send_message(message.chat.id, "‚åõ")


@main_bot.message_handler(func=lambda message:
                          message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†" or message.text.lower() == "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                          or message.text == "/settings")
def settings_menu(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /settings –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    settings_message = "–ò–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:"
    num_translator = {
        1: "1‚É£",
        2: "2‚É£",
        3: "3‚É£",
        4: "4‚É£",
        5: "5‚É£",
        6: "6‚É£",
        7: "7‚É£",
        8: "8‚É£",
        9: "9‚É£",
        10: "üîü",
    }
    current_user_settings = get_current_user(message.chat.id).get("count_trains")

    markup = types.InlineKeyboardMarkup()

    first_line = []
    second_line = []
    for i in range(1, 11):
        if i != current_user_settings:
            button = types.InlineKeyboardButton(str(num_translator.get(i)), callback_data=str(i))
        else:
            button = types.InlineKeyboardButton("‚úÖ", callback_data="pass")

        if len(first_line) < 5:
            first_line.append(button)
        else:
            second_line.append(button)

    markup.row(*first_line)
    markup.row(*second_line)

    main_bot.send_message(message.chat.id, settings_message, reply_markup=markup)


@main_bot.message_handler(func=lambda message:
                          message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚ò∫Ô∏è" or message.text.lower() == "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
                          or message.text == "/feedback")
def feedback_menu(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /feedback –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    feedback_message = ('–ß—Ç–æ –±—ã –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—à–ª–æ –¥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ "–û—Ç–∑—ã–≤" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.\n'
                        "–Ø –æ—á–µ–Ω—å –∂–¥—É –ª—é–±—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å - –ø–∏—à–∏—Ç–µ.\n"
                        "–¢–∞–∫ –∂–µ, –µ—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –±–∞–≥ - –ø–∏—à–∏—Ç–µ, –Ω–æ, –Ω–∞–¥–µ—é—Å—å, –Ω–µ—Ç :)\n"
                        "–ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ª—é–±—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å ‚ò∫Ô∏è")

    main_bot.send_message(message.chat.id, feedback_message)


@main_bot.message_handler(func=lambda message: message.text.lower().startswith('–æ—Ç–∑—ã–≤'))
def send_me_feedback(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '–æ—Ç–∑—ã–≤', –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    feedback_bot.send_message(MY_CHAT_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {datetime.date.today()} –≤ "
                                          f"{int(datetime.datetime.now(pytz.utc).strftime('%H')) + 5}:"
                                          f"{datetime.datetime.now().strftime('%M')} "
                                          f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{message.from_user.username} —Å chad_id {message.chat.id}:\n"
                                          f"{message.text[5:]}")
    main_bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!\n"
                                           "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! ‚ù§Ô∏è\n"
                                           "üëáüëáüëá")


@main_bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline-–∫–Ω–æ–ø–æ–∫.

    :param call: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data: str = call.data
    message = call.message

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–µ–∑–¥–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if data in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]:
        main_bot.delete_message(message.chat.id, message.message_id)
        update_user_data(message.chat.id, [6], [int(data)])
        main_bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã!\n"
                                               "–í—ã–∑—ã–≤–∞–π—Ç–µ –º–µ–Ω—é, —Ç—ã–∫–Ω—É–≤ —Å—é–¥–∞ ‚ûú /menu –∏–ª–∏ –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç "
                                               "—Ç—É—Ç\n"
                                               "üëáüëáüëá")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
    if data.endswith("pass"):
        pass

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è:
    elif data.startswith("start_"):
        selected_station = call.data[6:]
        update_user_data(message.chat.id, [5], [selected_station])

        draw_second_station_menu(message, selected_station)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—Ç–∞–Ω—Ü–∏—é –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
    elif data.startswith("finish_"):
        main_bot.edit_message_text("ü§î", message.chat.id, message.message_id + 1)
        try:
            schedule_message = get_closest_trains(
                get_current_user(message.chat.id).get("last_selected_start_station"),
                call.data[7:],
                get_current_user(message.chat.id).get("count_trains")
            )
        except TypeError:
            schedule_message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥" –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ 1 –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.'

        main_bot.edit_message_text(schedule_message, message.chat.id, message.message_id + 1, parse_mode="html")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    elif data.startswith("favorite_"):
        main_bot.edit_message_text("ü§î", message.chat.id, message.message_id + 1)
        start_station, finish_station = data[9:].split("->")
        schedule_message = get_closest_trains(
            start_station,
            finish_station,
            get_current_user(message.chat.id).get("count_trains")
        )

        main_bot.edit_message_text(schedule_message, message.chat.id, message.message_id + 1, parse_mode="html")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    elif data.startswith("remove_"):
        selected_trip_to_remove = call.data[7:]
        update_user_data(message.chat.id, [7], [selected_trip_to_remove])
        draw_confirm_remove_trip_menu(message)

    # –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    elif data == "confirm_delete":
        remove_favorite_trip(message.chat.id, get_current_user(message.chat.id).get("selected_trip_to_remove"))

        update_user_data(message.chat.id, [7], [None])
        draw_remove_favorite_trip_menu(message)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ—é –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    elif data == "go_to_favorite_trips_menu":
        draw_favorite_trips_menu(message)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —à–∞–≥ 1
    elif data == "draw_add_favorite_trip_menu_step_one":
        draw_add_favorite_trip_menu_step_one(message)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —à–∞–≥ 2
    elif data.startswith("select_"):
        selected_station = call.data[7:]
        update_user_data(message.chat.id, [5], [selected_station])

        draw_add_favorite_trip_menu_step_two(message, selected_station)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    elif data.startswith("add_"):
        start_station = get_current_user(message.chat.id).get("last_selected_start_station")
        finish_station = data[4:]

        selected_trip = f"{start_station}->{finish_station}"

        if selected_trip not in get_favorite_trips(message.chat.id):
            add_favorite_trip(message.chat.id, f"{start_station}->{finish_station}")
            update_user_data(message.chat.id, [5], [None])

            draw_favorite_trips_menu(message)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    elif data == "draw_remove_favorite_trip_menu":
        update_user_data(message.chat.id, [7], [None])
        draw_remove_favorite_trip_menu(message)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ–Ω—é
    elif data == "back_to_first_station_menu":
        update_user_data(message.chat.id, [5], [None])
        redraw_first_station_menu(message)


def get_favorite_trips_marcup(message, add_to_callback) -> types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param add_to_callback: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º callback
    :return: –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
    """
    favorite_trips = get_favorite_trips(message.chat.id)

    markup = types.InlineKeyboardMarkup()
    for trip in favorite_trips:
        name = f"{station_button_names.get(trip.split('->')[0])} ‚ûú {station_button_names.get(trip.split('->')[1])}"
        callback = f"{add_to_callback}{'->'.join(trip.split('->'))}"
        markup.add(types.InlineKeyboardButton(name, callback_data=callback))

    return markup


def get_first_station_marcup(add_to_callback) -> types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.

    :param add_to_callback: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º callback
    :return: –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
    """
    markup = types.InlineKeyboardMarkup()

    buttons = [
        types.InlineKeyboardButton(name, callback_data=f"{add_to_callback}{callback}")
        for callback, name in station_button_names.items()
    ]

    for i in range(0, len(buttons), 3):
        markup.add(*buttons[i:i + 3])

    return markup


def get_second_station_marcup(add_to_callback, selected_station: str) -> types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.

    :param add_to_callback: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º callback
    :param selected_station: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–µ—Ä–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è
    :return: –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
    """
    markup = types.InlineKeyboardMarkup()

    buttons = []
    for callback, name in station_button_names.items():
        if callback == selected_station:
            name = f"‚úÖ {name[name.index(' ') + 1:]}"
            callback = "pass"
        buttons.append(types.InlineKeyboardButton(name, callback_data=f"{add_to_callback}{callback}"))

    for i in range(0, len(buttons), 3):
        markup.add(*buttons[i:i + 3])

    return markup


def send_first_station_menu(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    markup = get_first_station_marcup("start_")

    favorite_trips_menu_button = types.InlineKeyboardButton("‚ú® –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ‚ú®",
                                                            callback_data="go_to_favorite_trips_menu")
    markup.add(favorite_trips_menu_button)

    main_bot.send_message(message.chat.id, "–° –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É–µ—Ö–∞—Ç—å? üó∫",
                          reply_markup=markup)


def redraw_first_station_menu(message):
    """
    –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    markup = get_first_station_marcup("start_")

    favorite_trips_menu_button = types.InlineKeyboardButton("‚ú® –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ‚ú®",
                                                            callback_data="go_to_favorite_trips_menu")
    markup.add(favorite_trips_menu_button)

    main_bot.edit_message_text("–° –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É–µ—Ö–∞—Ç—å? üó∫", message.chat.id, message.message_id,
                               reply_markup=markup)


def draw_second_station_menu(message, selected_station: str):
    """
    –†–∏—Å—É–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param selected_station: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–µ—Ä–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è
    """
    markup = get_second_station_marcup("finish_", selected_station)

    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_first_station_menu")
    markup.add(back_button)

    main_bot.edit_message_text("–ù–∞ –∫–∞–∫—É—é —Å—Ç–∞–Ω—Ü–∏—é –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å? ‚õî", message.chat.id, message.message_id,
                               reply_markup=markup)


def draw_favorite_trips_menu(message):
    """
    –†–∏—Å—É–µ—Ç –º–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    markup = get_favorite_trips_marcup(message, "favorite_")

    add_favorite_trip_button = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç",
                                                          callback_data="draw_add_favorite_trip_menu_step_one")
    remove_favorite_trip_button = types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç",
                                                             callback_data="draw_remove_favorite_trip_menu")

    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_first_station_menu")
    markup.row(remove_favorite_trip_button, add_favorite_trip_button)
    markup.add(back_button)

    favorite_station_message = "üìù –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:"

    main_bot.edit_message_text(favorite_station_message, message.chat.id, message.message_id, reply_markup=markup)


def draw_add_favorite_trip_menu_step_one(message):
    """
    –†–∏—Å—É–µ—Ç –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (—à–∞–≥ 1).

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    markup = get_first_station_marcup("select_")
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_to_favorite_trips_menu"))

    main_bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é: ", message.chat.id, message.message_id, reply_markup=markup)


def draw_add_favorite_trip_menu_step_two(message, selected_station: str):
    """
    –†–∏—Å—É–µ—Ç –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (—à–∞–≥ 2).

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param selected_station: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è
    """
    markup = get_second_station_marcup("add_", selected_station)
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="draw_add_favorite_trip_menu_step_one")
    markup.add(back_button)

    main_bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é: ", message.chat.id, message.message_id,
                               reply_markup=markup)


def draw_remove_favorite_trip_menu(message):
    """
    –†–∏—Å—É–µ—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    markup = get_favorite_trips_marcup(message, "remove_")
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_to_favorite_trips_menu")
    markup.add(back_button)

    remove_favorite_trip_message = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è‚ùå"
    main_bot.edit_message_text(remove_favorite_trip_message, message.chat.id, message.message_id, reply_markup=markup)


def draw_confirm_remove_trip_menu(message):
    """
    –†–∏—Å—É–µ—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_delete"))
    markup.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="draw_remove_favorite_trip_menu"))

    trip_to_remove = get_current_user(message.chat.id).get("selected_trip_to_remove")

    confirm_remove_trip_message = ("‚Åâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç:\n"
                                   f"{station_button_names.get(trip_to_remove.split('->')[0])} ‚ûú "
                                   f"{station_button_names.get(trip_to_remove.split('->')[1])}")

    main_bot.edit_message_text(confirm_remove_trip_message, message.chat.id, message.message_id, reply_markup=markup)


if __name__ == '__main__':
    if datetime.date.today().day == 1:
        update_all_links()

    if datetime.date.today().weekday() == 0:
        update_schedule_pages()
        update_schedule_json()

    main_bot.infinity_polling()
