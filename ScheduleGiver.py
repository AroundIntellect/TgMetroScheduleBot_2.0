from os import sep
import datetime
import pytz
import json

station_priority = {
    "Kosmonavtov_Avenue": 0,
    "Uralmash": 1,
    "Mashinostroiteley": 2,
    "Uralskaya": 3,
    "Dinamo": 4,
    "Square_of_1905": 5,
    "Geologicheskaya": 6,
    "Chkalovskaya": 7,
    "Botanicheskaya": 8
}

station_translator = {
    "Kosmonavtov_Avenue": "–ü—Ä–æ—Å–ø–µ–∫—Ç –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤",
    "Uralmash": "–£—Ä–∞–ª–º–∞—à",
    "Mashinostroiteley": "–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π",
    "Uralskaya": "–£—Ä–∞–ª—å—Å–∫–∞—è",
    "Dinamo": "–î–∏–Ω–∞–º–æ",
    "Square_of_1905": "–ü–ª–æ—â–∞–¥—å 1905 –≥–æ–¥–∞",
    "Geologicheskaya": "–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è",
    "Chkalovskaya": "–ß–∫–∞–ª–æ–≤—Å–∫–∞—è",
    "Botanicheskaya": "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è"
}


def get_day_type(date: datetime.date = None) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É –∏–ª–∏ —Ä–∞–±–æ—á–µ–º—É –¥–Ω—è–º.
    –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—É—â—É—é
    :param date: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime.date
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–í—ã—Ö–æ–¥–Ω—ã–µ", –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥–Ω—ã–º –¥–Ω—ë–º, –∏ "–†–∞–±–æ—á–∏–µ", –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
    """
    if date is None:
        date = datetime.date.today()

    non_weekends = [
        datetime.date(2024, 11, 2),
        datetime.date(2024, 12, 28)
    ]

    weekends = [
        datetime.date(2024, 5, 9),
        datetime.date(2024, 5, 10),
        datetime.date(2024, 6, 12),
        datetime.date(2024, 11, 4),
        datetime.date(2024, 12, 30),
        datetime.date(2024, 12, 31)
    ]

    if date in non_weekends:
        return "–†–∞–±–æ—á–∏–µ"
    elif date in weekends:
        return "–í—ã—Ö–æ–¥–Ω—ã–µ"
    elif date.weekday() >= 5:
        return "–í—ã—Ö–æ–¥–Ω—ã–µ"
    else:
        return "–†–∞–±–æ—á–∏–µ"


def get_current_time() -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞
    :return: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ß–∞—Å—ã * 60 + –ú–∏–Ω—É—Ç—ã)
    """
    hours = int(datetime.datetime.now(pytz.utc).strftime("%H")) + 5
    if hours >= 25:
        hours -= 24
    minutes = int(datetime.datetime.now().strftime("%M"))
    return hours * 60 + minutes


def get_formatted_time(time: int) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
    :param time: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ß–∞—Å—ã * 60 + –ú–∏–Ω—É—Ç—ã)
    :return: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
    """
    minute = time % 60
    hour = (time - minute) // 60

    if minute < 10:
        minute = f"0{minute}"
    if hour < 10:
        hour = f"0{hour}"
    elif hour == 24:
        hour = "00"

    return f"{hour}:{minute}"


def get_schedule(station_name, day_type, direction) -> list:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–µ–∑–¥–æ–≤ –¥–ª—è —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å—Ç–∞–Ω—Ü–∏–∏, —Ç–∏–ø–∞ –¥–Ω—è –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    :param station_name: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
    :param day_type: –¢–∏–ø –¥–Ω—è (–í—ã—Ö–æ–¥–Ω—ã–µ/–†–∞–±–æ—á–∏–µ)
    :param direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è/–ü—Ä–æ—Å–ø–µ–∫—Ç –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤)
    :return: –ú–∞—Å—Å–∏–≤ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–µ–∑–¥–æ–≤
    """
    with open(f"ScheduleDB{sep}schedule.json", "r", encoding="utf-8") as file:
        schedule: dict = json.load(file)
        return schedule.get(station_name, {}).get(day_type, {}).get(direction)


def get_closest_trains(start_station: str, finish_station: str, count_trains: int) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–µ–∑–¥–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
    :param start_station: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
    :param finish_station: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
    :param count_trains: –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–≤
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–µ–∑–¥–æ–≤
    """

    start_times, finish_times = [], []
    message = ("–°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö üöá –ø–æ –º–∞—Ä—à—Ä—É—Ç—É\n"
               f"<u><i><b>"
               f"{station_translator.get(start_station)} ‚ûú {station_translator.get(finish_station)}:"
               f"</b></i></u>\n")

    # –¢–∞–∫ –∫–∞–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è -> –ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è" –∏ "–ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤ -> –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
    # –≤—Ä–µ–º—è –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —ç—Ç–∏ —Å—Ç–∞–Ω—Ü–∏–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –≤—Ä–µ–º—è –¥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ + 2 –º–∏–Ω—É—Ç—ã.
    was_changed = False
    if finish_station == "Botanicheskaya":
        finish_station = "Chkalovskaya"
        was_changed = True
    elif finish_station == "Kosmonavtov_Avenue":
        finish_station = "Uralmash"
        was_changed = True

    if station_priority.get(start_station) < station_priority.get(finish_station):
        direction = "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è"
    else:
        direction = "–ü—Ä–æ—Å–ø–µ–∫—Ç –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤"

    current_time = get_current_time()

    start_schedule = get_schedule(start_station, get_day_type(), direction)
    finish_schedule = get_schedule(finish_station, get_day_type(), direction)
    for i in range(len(start_schedule)):
        if start_schedule[i] >= current_time:
            f_time = finish_schedule[i]
            if was_changed:
                f_time += 2
            message += f"<u><i>–í—Ä–µ–º—è –≤ –ø—É—Ç–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç {f_time - start_schedule[i]} –º–∏–Ω—É—Ç(—ã)</i></u>\n"
            message += (f"\n<b>1. {get_formatted_time(start_schedule[i])} ‚ûú {get_formatted_time(f_time)} - ‚è≥ "
                        f"–¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {start_schedule[i] - current_time} –º–∏–Ω—É—Ç(—ã).</b>\n")

            start_times = start_schedule[i + 1:i + count_trains]
            finish_times = finish_schedule[i + 1:i + count_trains]
            break

    for k in range(len(start_times)):
        f_time = finish_times[k]
        if was_changed:
            f_time += 2

        message += (f"\n<i>{k + 2}. {get_formatted_time(start_times[k])} ‚ûú {get_formatted_time(f_time)} - "
                    f"–¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {start_times[k] - current_time} –º–∏–Ω—É—Ç(—ã).</i>\n")

    return message
